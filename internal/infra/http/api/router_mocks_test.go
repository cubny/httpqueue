// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go

// Package handler is a generated GoMock package.
package api

import (
	context "context"
	cart "github.com/cubny/cart"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockServiceProvider is a mock of ServiceProvider interface.
type MockServiceProvider struct {
	ctrl     *gomock.Controller
	recorder *MockServiceProviderMockRecorder
}

// MockServiceProviderMockRecorder is the mock recorder for MockServiceProvider.
type MockServiceProviderMockRecorder struct {
	mock *MockServiceProvider
}

// NewMockServiceProvider creates a new mock instance.
func NewMockServiceProvider(ctrl *gomock.Controller) *MockServiceProvider {
	mock := &MockServiceProvider{ctrl: ctrl}
	mock.recorder = &MockServiceProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceProvider) EXPECT() *MockServiceProviderMockRecorder {
	return m.recorder
}

// CreateCart mocks base method.
func (m *MockServiceProvider) CreateCart(ctx context.Context, userID int64) (*cart.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTimer", ctx, userID)
	ret0, _ := ret[0].(*cart.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCart indicates an expected call of CreateCart.
func (mr *MockServiceProviderMockRecorder) CreateCart(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTimer", reflect.TypeOf((*MockServiceProvider)(nil).CreateCart), ctx, userID)
}

// AddItem mocks base method.
func (m *MockServiceProvider) AddItem(ctx context.Context, userID int64, item *cart.Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddItem", ctx, userID, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddItem indicates an expected call of AddItem.
func (mr *MockServiceProviderMockRecorder) AddItem(ctx, userID, item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddItem", reflect.TypeOf((*MockServiceProvider)(nil).AddItem), ctx, userID, item)
}

// RemoveItem mocks base method.
func (m *MockServiceProvider) RemoveItem(ctx context.Context, userID, itemID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveItem", ctx, userID, itemID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveItem indicates an expected call of RemoveItem.
func (mr *MockServiceProviderMockRecorder) RemoveItem(ctx, userID, itemID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveItem", reflect.TypeOf((*MockServiceProvider)(nil).RemoveItem), ctx, userID, itemID)
}

// EmptyCart mocks base method.
func (m *MockServiceProvider) EmptyCart(ctx context.Context, userID, cartID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EmptyCart", ctx, userID, cartID)
	ret0, _ := ret[0].(error)
	return ret0
}

// EmptyCart indicates an expected call of EmptyCart.
func (mr *MockServiceProviderMockRecorder) EmptyCart(ctx, userID, cartID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmptyCart", reflect.TypeOf((*MockServiceProvider)(nil).EmptyCart), ctx, userID, cartID)
}

// MockAuthProvider is a mock of AuthProvider interface.
type MockAuthProvider struct {
	ctrl     *gomock.Controller
	recorder *MockAuthProviderMockRecorder
}

// MockAuthProviderMockRecorder is the mock recorder for MockAuthProvider.
type MockAuthProviderMockRecorder struct {
	mock *MockAuthProvider
}

// NewMockAuthProvider creates a new mock instance.
func NewMockAuthProvider(ctrl *gomock.Controller) *MockAuthProvider {
	mock := &MockAuthProvider{ctrl: ctrl}
	mock.recorder = &MockAuthProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthProvider) EXPECT() *MockAuthProviderMockRecorder {
	return m.recorder
}

// VerifyKey mocks base method.
func (m *MockAuthProvider) VerifyKey(ctx context.Context, accessKey string) (*auth.AccessKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyKey", ctx, accessKey)
	ret0, _ := ret[0].(*auth.AccessKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyKey indicates an expected call of VerifyKey.
func (mr *MockAuthProviderMockRecorder) VerifyAccessKey(ctx, accessKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyKey", reflect.TypeOf((*MockAuthProvider)(nil).VerifyKey), ctx, accessKey)
}
