// Code generated by MockGen. DO NOT EDIT.
// Source: timer.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	cart "github.com/cubny/cart"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStorage is a mock of Repo interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// CreateCart mocks base method.
func (m *MockStorage) CreateCart(ctx context.Context, cart *cart.Cart) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTimer", ctx, cart)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCart indicates an expected call of CreateCart.
func (mr *MockStorageMockRecorder) CreateCart(ctx, cart interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTimer", reflect.TypeOf((*MockStorage)(nil).CreateCart), ctx, cart)
}

// GetCart mocks base method.
func (m *MockStorage) GetCart(ctx context.Context, userID, cartID int64) (*cart.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCart", ctx, userID, cartID)
	ret0, _ := ret[0].(*cart.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCart indicates an expected call of GetCart.
func (mr *MockStorageMockRecorder) GetCart(ctx, userID, cartID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCart", reflect.TypeOf((*MockStorage)(nil).GetCart), ctx, userID, cartID)
}

// FindItemByProductID mocks base method.
func (m *MockStorage) FindItemByProductID(ctx context.Context, cartID, productID int64) (*cart.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindItemByProductID", ctx, cartID, productID)
	ret0, _ := ret[0].(*cart.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindItemByProductID indicates an expected call of FindItemByProductID.
func (mr *MockStorageMockRecorder) FindItemByProductID(ctx, cartID, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindItemByProductID", reflect.TypeOf((*MockStorage)(nil).FindItemByProductID), ctx, cartID, productID)
}

// CreateItem mocks base method.
func (m *MockStorage) CreateItem(ctx context.Context, item *cart.Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateItem", ctx, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateItem indicates an expected call of CreateItem.
func (mr *MockStorageMockRecorder) CreateItem(ctx, item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateItem", reflect.TypeOf((*MockStorage)(nil).CreateItem), ctx, item)
}

// GetItem mocks base method.
func (m *MockStorage) GetItem(ctx context.Context, itemID int64) (*cart.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItem", ctx, itemID)
	ret0, _ := ret[0].(*cart.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItem indicates an expected call of GetItem.
func (mr *MockStorageMockRecorder) GetItem(ctx, itemID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItem", reflect.TypeOf((*MockStorage)(nil).GetItem), ctx, itemID)
}

// RemoveItem mocks base method.
func (m *MockStorage) RemoveItem(ctx context.Context, itemID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveItem", ctx, itemID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveItem indicates an expected call of RemoveItem.
func (mr *MockStorageMockRecorder) RemoveItem(ctx, itemID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveItem", reflect.TypeOf((*MockStorage)(nil).RemoveItem), ctx, itemID)
}

// RemoveItemsByCartID mocks base method.
func (m *MockStorage) RemoveItemsByCartID(ctx context.Context, cartID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveItemsByCartID", ctx, cartID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveItemsByCartID indicates an expected call of RemoveItemsByCartID.
func (mr *MockStorageMockRecorder) RemoveItemsByCartID(ctx, cartID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveItemsByCartID", reflect.TypeOf((*MockStorage)(nil).RemoveItemsByCartID), ctx, cartID)
}

// Close mocks base method.
func (m *MockStorage) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStorageMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStorage)(nil).Close))
}
