// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cubny/httpqueue/internal/app/timer (interfaces: HttpClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	timer "github.com/cubny/httpqueue/internal/app/timer"
	gomock "github.com/golang/mock/gomock"
)

// HttpClient is a mock of HttpClient interface.
type HttpClient struct {
	ctrl     *gomock.Controller
	recorder *HttpClientMockRecorder
}

// HttpClientMockRecorder is the mock recorder for HttpClient.
type HttpClientMockRecorder struct {
	mock *HttpClient
}

// NewHttpClient creates a new mock instance.
func NewHttpClient(ctrl *gomock.Controller) *HttpClient {
	mock := &HttpClient{ctrl: ctrl}
	mock.recorder = &HttpClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *HttpClient) EXPECT() *HttpClientMockRecorder {
	return m.recorder
}

// Shoot mocks base method.
func (m *HttpClient) Shoot(arg0 context.Context, arg1 *timer.Timer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shoot", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Shoot indicates an expected call of Shoot.
func (mr *HttpClientMockRecorder) Shoot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shoot", reflect.TypeOf((*HttpClient)(nil).Shoot), arg0, arg1)
}
