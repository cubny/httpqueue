// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cubny/httpqueue/internal/app/timer (interfaces: Repo)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	timer "github.com/cubny/httpqueue/internal/app/timer"
	gomock "github.com/golang/mock/gomock"
)

// Repo is a mock of Repo interface.
type Repo struct {
	ctrl     *gomock.Controller
	recorder *RepoMockRecorder
}

// RepoMockRecorder is the mock recorder for Repo.
type RepoMockRecorder struct {
	mock *Repo
}

// NewRepo creates a new mock instance.
func NewRepo(ctrl *gomock.Controller) *Repo {
	mock := &Repo{ctrl: ctrl}
	mock.recorder = &RepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Repo) EXPECT() *RepoMockRecorder {
	return m.recorder
}

// AddTimer mocks base method.
func (m *Repo) AddTimer(arg0 context.Context, arg1 *timer.Timer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTimer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTimer indicates an expected call of AddTimer.
func (mr *RepoMockRecorder) AddTimer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTimer", reflect.TypeOf((*Repo)(nil).AddTimer), arg0, arg1)
}

// Archive mocks base method.
func (m *Repo) Archive(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Archive", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Archive indicates an expected call of Archive.
func (mr *RepoMockRecorder) Archive(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Archive", reflect.TypeOf((*Repo)(nil).Archive), arg0, arg1)
}

// Find mocks base method.
func (m *Repo) Find(arg0 context.Context, arg1 string) (*timer.Timer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0, arg1)
	ret0, _ := ret[0].(*timer.Timer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *RepoMockRecorder) Find(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*Repo)(nil).Find), arg0, arg1)
}

// IsArchived mocks base method.
func (m *Repo) IsArchived(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsArchived", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsArchived indicates an expected call of IsArchived.
func (mr *RepoMockRecorder) IsArchived(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsArchived", reflect.TypeOf((*Repo)(nil).IsArchived), arg0, arg1)
}
