// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cubny/httpqueue/internal/infra/asynq/timer (interfaces: Broker)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	asynq "github.com/hibiken/asynq"
)

// Broker is a mock of Broker interface.
type Broker struct {
	ctrl     *gomock.Controller
	recorder *BrokerMockRecorder
}

// BrokerMockRecorder is the mock recorder for Broker.
type BrokerMockRecorder struct {
	mock *Broker
}

// NewBroker creates a new mock instance.
func NewBroker(ctrl *gomock.Controller) *Broker {
	mock := &Broker{ctrl: ctrl}
	mock.recorder = &BrokerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Broker) EXPECT() *BrokerMockRecorder {
	return m.recorder
}

// EnqueueContext mocks base method.
func (m *Broker) EnqueueContext(arg0 context.Context, arg1 *asynq.Task, arg2 ...asynq.Option) (*asynq.TaskInfo, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnqueueContext", varargs...)
	ret0, _ := ret[0].(*asynq.TaskInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnqueueContext indicates an expected call of EnqueueContext.
func (mr *BrokerMockRecorder) EnqueueContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnqueueContext", reflect.TypeOf((*Broker)(nil).EnqueueContext), varargs...)
}
