// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hibiken/asynq (interfaces: RedisConnOpt)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// RedisConnOpt is a mock of RedisConnOpt interface.
type RedisConnOpt struct {
	ctrl     *gomock.Controller
	recorder *RedisConnOptMockRecorder
}

// RedisConnOptMockRecorder is the mock recorder for RedisConnOpt.
type RedisConnOptMockRecorder struct {
	mock *RedisConnOpt
}

// NewRedisConnOpt creates a new mock instance.
func NewRedisConnOpt(ctrl *gomock.Controller) *RedisConnOpt {
	mock := &RedisConnOpt{ctrl: ctrl}
	mock.recorder = &RedisConnOptMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *RedisConnOpt) EXPECT() *RedisConnOptMockRecorder {
	return m.recorder
}

// MakeRedisClient mocks base method.
func (m *RedisConnOpt) MakeRedisClient() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeRedisClient")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// MakeRedisClient indicates an expected call of MakeRedisClient.
func (mr *RedisConnOptMockRecorder) MakeRedisClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeRedisClient", reflect.TypeOf((*RedisConnOpt)(nil).MakeRedisClient))
}
